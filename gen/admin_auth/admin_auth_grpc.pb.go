// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: admin_auth.proto

package admin_auth

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AdminAuthService_Register_FullMethodName           = "/admin_auth.AdminAuthService/Register"
	AdminAuthService_AuthenticateGoogle_FullMethodName = "/admin_auth.AdminAuthService/AuthenticateGoogle"
	AdminAuthService_Refresh_FullMethodName            = "/admin_auth.AdminAuthService/Refresh"
	AdminAuthService_UpdatePassword_FullMethodName     = "/admin_auth.AdminAuthService/UpdatePassword"
	AdminAuthService_Authenticate_FullMethodName       = "/admin_auth.AdminAuthService/Authenticate"
	AdminAuthService_CreateGroup_FullMethodName        = "/admin_auth.AdminAuthService/CreateGroup"
	AdminAuthService_CreatePermission_FullMethodName   = "/admin_auth.AdminAuthService/CreatePermission"
	AdminAuthService_CreateScope_FullMethodName        = "/admin_auth.AdminAuthService/CreateScope"
	AdminAuthService_Validate_FullMethodName           = "/admin_auth.AdminAuthService/Validate"
	AdminAuthService_Ping_FullMethodName               = "/admin_auth.AdminAuthService/Ping"
)

// AdminAuthServiceClient is the client API for AdminAuthService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AdminAuthServiceClient interface {
	Register(ctx context.Context, in *AdminAuthRegisterUserGrpcRequest, opts ...grpc.CallOption) (*AdminAuthRegisterUserGrpcResponse, error)
	AuthenticateGoogle(ctx context.Context, in *AdminAuthGoogleGrpcRequest, opts ...grpc.CallOption) (*AdminAuthGoogleGrpcResponse, error)
	Refresh(ctx context.Context, in *AdminAuthRefreshGrpcRequest, opts ...grpc.CallOption) (*AdminAuthRefreshGrpcResponse, error)
	UpdatePassword(ctx context.Context, in *AdminAuthUpdatePasswordGrpcRequest, opts ...grpc.CallOption) (*AdminAuthUpdatePasswordGrpcResponse, error)
	Authenticate(ctx context.Context, in *AdminAuthenticateGrpcRequest, opts ...grpc.CallOption) (*AdminAuthenticateGrpcResponse, error)
	CreateGroup(ctx context.Context, in *AdminAuthCreateGroupGrpcRequest, opts ...grpc.CallOption) (*AdminAuthCreateGroupGrpcResponse, error)
	CreatePermission(ctx context.Context, in *AdminAuthCreatePermissionGrpcRequest, opts ...grpc.CallOption) (*AdminAuthCreatePermissionGrpcResponse, error)
	CreateScope(ctx context.Context, in *AdminAuthCreateScopeGrpcRequest, opts ...grpc.CallOption) (*AdminAuthCreateScopeGrpcResponse, error)
	Validate(ctx context.Context, in *AdminAuthValidateJwtRequest, opts ...grpc.CallOption) (*AdminAuthValidateJwtResponse, error)
	Ping(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type adminAuthServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAdminAuthServiceClient(cc grpc.ClientConnInterface) AdminAuthServiceClient {
	return &adminAuthServiceClient{cc}
}

func (c *adminAuthServiceClient) Register(ctx context.Context, in *AdminAuthRegisterUserGrpcRequest, opts ...grpc.CallOption) (*AdminAuthRegisterUserGrpcResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AdminAuthRegisterUserGrpcResponse)
	err := c.cc.Invoke(ctx, AdminAuthService_Register_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminAuthServiceClient) AuthenticateGoogle(ctx context.Context, in *AdminAuthGoogleGrpcRequest, opts ...grpc.CallOption) (*AdminAuthGoogleGrpcResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AdminAuthGoogleGrpcResponse)
	err := c.cc.Invoke(ctx, AdminAuthService_AuthenticateGoogle_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminAuthServiceClient) Refresh(ctx context.Context, in *AdminAuthRefreshGrpcRequest, opts ...grpc.CallOption) (*AdminAuthRefreshGrpcResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AdminAuthRefreshGrpcResponse)
	err := c.cc.Invoke(ctx, AdminAuthService_Refresh_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminAuthServiceClient) UpdatePassword(ctx context.Context, in *AdminAuthUpdatePasswordGrpcRequest, opts ...grpc.CallOption) (*AdminAuthUpdatePasswordGrpcResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AdminAuthUpdatePasswordGrpcResponse)
	err := c.cc.Invoke(ctx, AdminAuthService_UpdatePassword_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminAuthServiceClient) Authenticate(ctx context.Context, in *AdminAuthenticateGrpcRequest, opts ...grpc.CallOption) (*AdminAuthenticateGrpcResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AdminAuthenticateGrpcResponse)
	err := c.cc.Invoke(ctx, AdminAuthService_Authenticate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminAuthServiceClient) CreateGroup(ctx context.Context, in *AdminAuthCreateGroupGrpcRequest, opts ...grpc.CallOption) (*AdminAuthCreateGroupGrpcResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AdminAuthCreateGroupGrpcResponse)
	err := c.cc.Invoke(ctx, AdminAuthService_CreateGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminAuthServiceClient) CreatePermission(ctx context.Context, in *AdminAuthCreatePermissionGrpcRequest, opts ...grpc.CallOption) (*AdminAuthCreatePermissionGrpcResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AdminAuthCreatePermissionGrpcResponse)
	err := c.cc.Invoke(ctx, AdminAuthService_CreatePermission_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminAuthServiceClient) CreateScope(ctx context.Context, in *AdminAuthCreateScopeGrpcRequest, opts ...grpc.CallOption) (*AdminAuthCreateScopeGrpcResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AdminAuthCreateScopeGrpcResponse)
	err := c.cc.Invoke(ctx, AdminAuthService_CreateScope_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminAuthServiceClient) Validate(ctx context.Context, in *AdminAuthValidateJwtRequest, opts ...grpc.CallOption) (*AdminAuthValidateJwtResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AdminAuthValidateJwtResponse)
	err := c.cc.Invoke(ctx, AdminAuthService_Validate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminAuthServiceClient) Ping(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AdminAuthService_Ping_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdminAuthServiceServer is the server API for AdminAuthService service.
// All implementations must embed UnimplementedAdminAuthServiceServer
// for forward compatibility.
type AdminAuthServiceServer interface {
	Register(context.Context, *AdminAuthRegisterUserGrpcRequest) (*AdminAuthRegisterUserGrpcResponse, error)
	AuthenticateGoogle(context.Context, *AdminAuthGoogleGrpcRequest) (*AdminAuthGoogleGrpcResponse, error)
	Refresh(context.Context, *AdminAuthRefreshGrpcRequest) (*AdminAuthRefreshGrpcResponse, error)
	UpdatePassword(context.Context, *AdminAuthUpdatePasswordGrpcRequest) (*AdminAuthUpdatePasswordGrpcResponse, error)
	Authenticate(context.Context, *AdminAuthenticateGrpcRequest) (*AdminAuthenticateGrpcResponse, error)
	CreateGroup(context.Context, *AdminAuthCreateGroupGrpcRequest) (*AdminAuthCreateGroupGrpcResponse, error)
	CreatePermission(context.Context, *AdminAuthCreatePermissionGrpcRequest) (*AdminAuthCreatePermissionGrpcResponse, error)
	CreateScope(context.Context, *AdminAuthCreateScopeGrpcRequest) (*AdminAuthCreateScopeGrpcResponse, error)
	Validate(context.Context, *AdminAuthValidateJwtRequest) (*AdminAuthValidateJwtResponse, error)
	Ping(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	mustEmbedUnimplementedAdminAuthServiceServer()
}

// UnimplementedAdminAuthServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAdminAuthServiceServer struct{}

func (UnimplementedAdminAuthServiceServer) Register(context.Context, *AdminAuthRegisterUserGrpcRequest) (*AdminAuthRegisterUserGrpcResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedAdminAuthServiceServer) AuthenticateGoogle(context.Context, *AdminAuthGoogleGrpcRequest) (*AdminAuthGoogleGrpcResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthenticateGoogle not implemented")
}
func (UnimplementedAdminAuthServiceServer) Refresh(context.Context, *AdminAuthRefreshGrpcRequest) (*AdminAuthRefreshGrpcResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Refresh not implemented")
}
func (UnimplementedAdminAuthServiceServer) UpdatePassword(context.Context, *AdminAuthUpdatePasswordGrpcRequest) (*AdminAuthUpdatePasswordGrpcResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePassword not implemented")
}
func (UnimplementedAdminAuthServiceServer) Authenticate(context.Context, *AdminAuthenticateGrpcRequest) (*AdminAuthenticateGrpcResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Authenticate not implemented")
}
func (UnimplementedAdminAuthServiceServer) CreateGroup(context.Context, *AdminAuthCreateGroupGrpcRequest) (*AdminAuthCreateGroupGrpcResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGroup not implemented")
}
func (UnimplementedAdminAuthServiceServer) CreatePermission(context.Context, *AdminAuthCreatePermissionGrpcRequest) (*AdminAuthCreatePermissionGrpcResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePermission not implemented")
}
func (UnimplementedAdminAuthServiceServer) CreateScope(context.Context, *AdminAuthCreateScopeGrpcRequest) (*AdminAuthCreateScopeGrpcResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateScope not implemented")
}
func (UnimplementedAdminAuthServiceServer) Validate(context.Context, *AdminAuthValidateJwtRequest) (*AdminAuthValidateJwtResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Validate not implemented")
}
func (UnimplementedAdminAuthServiceServer) Ping(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedAdminAuthServiceServer) mustEmbedUnimplementedAdminAuthServiceServer() {}
func (UnimplementedAdminAuthServiceServer) testEmbeddedByValue()                          {}

// UnsafeAdminAuthServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AdminAuthServiceServer will
// result in compilation errors.
type UnsafeAdminAuthServiceServer interface {
	mustEmbedUnimplementedAdminAuthServiceServer()
}

func RegisterAdminAuthServiceServer(s grpc.ServiceRegistrar, srv AdminAuthServiceServer) {
	// If the following call pancis, it indicates UnimplementedAdminAuthServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AdminAuthService_ServiceDesc, srv)
}

func _AdminAuthService_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminAuthRegisterUserGrpcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminAuthServiceServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminAuthService_Register_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminAuthServiceServer).Register(ctx, req.(*AdminAuthRegisterUserGrpcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminAuthService_AuthenticateGoogle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminAuthGoogleGrpcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminAuthServiceServer).AuthenticateGoogle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminAuthService_AuthenticateGoogle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminAuthServiceServer).AuthenticateGoogle(ctx, req.(*AdminAuthGoogleGrpcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminAuthService_Refresh_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminAuthRefreshGrpcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminAuthServiceServer).Refresh(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminAuthService_Refresh_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminAuthServiceServer).Refresh(ctx, req.(*AdminAuthRefreshGrpcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminAuthService_UpdatePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminAuthUpdatePasswordGrpcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminAuthServiceServer).UpdatePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminAuthService_UpdatePassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminAuthServiceServer).UpdatePassword(ctx, req.(*AdminAuthUpdatePasswordGrpcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminAuthService_Authenticate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminAuthenticateGrpcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminAuthServiceServer).Authenticate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminAuthService_Authenticate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminAuthServiceServer).Authenticate(ctx, req.(*AdminAuthenticateGrpcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminAuthService_CreateGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminAuthCreateGroupGrpcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminAuthServiceServer).CreateGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminAuthService_CreateGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminAuthServiceServer).CreateGroup(ctx, req.(*AdminAuthCreateGroupGrpcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminAuthService_CreatePermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminAuthCreatePermissionGrpcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminAuthServiceServer).CreatePermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminAuthService_CreatePermission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminAuthServiceServer).CreatePermission(ctx, req.(*AdminAuthCreatePermissionGrpcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminAuthService_CreateScope_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminAuthCreateScopeGrpcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminAuthServiceServer).CreateScope(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminAuthService_CreateScope_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminAuthServiceServer).CreateScope(ctx, req.(*AdminAuthCreateScopeGrpcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminAuthService_Validate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminAuthValidateJwtRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminAuthServiceServer).Validate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminAuthService_Validate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminAuthServiceServer).Validate(ctx, req.(*AdminAuthValidateJwtRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminAuthService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminAuthServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminAuthService_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminAuthServiceServer).Ping(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// AdminAuthService_ServiceDesc is the grpc.ServiceDesc for AdminAuthService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AdminAuthService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "admin_auth.AdminAuthService",
	HandlerType: (*AdminAuthServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _AdminAuthService_Register_Handler,
		},
		{
			MethodName: "AuthenticateGoogle",
			Handler:    _AdminAuthService_AuthenticateGoogle_Handler,
		},
		{
			MethodName: "Refresh",
			Handler:    _AdminAuthService_Refresh_Handler,
		},
		{
			MethodName: "UpdatePassword",
			Handler:    _AdminAuthService_UpdatePassword_Handler,
		},
		{
			MethodName: "Authenticate",
			Handler:    _AdminAuthService_Authenticate_Handler,
		},
		{
			MethodName: "CreateGroup",
			Handler:    _AdminAuthService_CreateGroup_Handler,
		},
		{
			MethodName: "CreatePermission",
			Handler:    _AdminAuthService_CreatePermission_Handler,
		},
		{
			MethodName: "CreateScope",
			Handler:    _AdminAuthService_CreateScope_Handler,
		},
		{
			MethodName: "Validate",
			Handler:    _AdminAuthService_Validate_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _AdminAuthService_Ping_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "admin_auth.proto",
}
